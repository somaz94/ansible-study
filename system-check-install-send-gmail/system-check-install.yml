---
- name: Execute system-check script and email the results
  hosts: all # This playbook will run on all defined hosts
  become: yes # This ensures that tasks are run with elevated privileges
  vars:
    # Email settings
    email_sender: ''
    email_password: '' # This is the Google App Password
    email_receiver: '' 
    
    # Paths for python and pip on the Ansible Control Machine (ACM)
    acm_python3_path: "/home/somaz/.pyenv/shims/python3"
    acm_pip3_path: "/home/somaz/.pyenv/shims/pip3"

  tasks:
    - name: Ensure python3 is installed
      apt:
        name: python3
        state: present # Ensure the package is installed. Other states: absent (to uninstall)

    - name: Ensure required packages for SMTP are installed
      apt:
        name:
          - libssl-dev
          - libsasl2-dev
          - python3-dev
        state: present

    - name: Ensure pip3 is installed
      apt:
        name: python3-pip
        state: present

    - name: Ensure python packages for SMTP are installed
      pip:
        name:
          - yagmail
        executable: /usr/bin/pip3 # Specify the pip3 path to use for installing the package

    - name: Display PATH variable
      local_action:
        module: debug
        var: ansible_env.PATH

    - name: Ensure python packages for SMTP are installed on ACM
      delegate_to: localhost  # Execute this on the Ansible Control Machine
      pip:
        name:
          - yagmail             # Ensuring the same email library exists on the ACM
        executable: "{{ acm_pip3_path }}"

    - name: Copy system-check.py script to remote server
      copy:
        src: system-check.py
        dest: /tmp/system-check.py
        mode: '0755'

    - name: Execute the system-check.py script and save to a log file
      shell:
        cmd: python3 /tmp/system-check.py > /tmp/system-check.log
      register: script_output  # Save the result of this task for later use

    - name: Fetch the log to local system
      fetch:
        src: /tmp/system-check.log
        dest: "/tmp/system-check-{{ ansible_hostname }}-{{ lookup('pipe', 'date +%Y-%m-%d') }}.log"
        flat: yes # Avoid creating an additional directory for the fetched file, just put it directly in the destination

    - name: Wait for a few seconds
      wait_for:
        timeout: 10
      delegate_to: localhost  # This task is executed on the ACM
      run_once: true          # This will ensure it only runs once, even if there are multiple hosts

    - name: Send email using python script
      command:
        cmd: |
          {{ acm_python3_path }} -c "
          import yagmail
          body = 'See the attached log for the system check results'
          filename = '/tmp/system-check-{{ ansible_hostname }}-{{ lookup('pipe', 'date +%Y-%m-%d') }}.log'
          yag = yagmail.SMTP('{{ email_sender }}', '{{ email_password }}')
          yag.send(
              to='{{ email_receiver }}',
              subject='System Check Result - {{ ansible_hostname }}',
              contents=body,
              attachments=filename
          )"
      delegate_to: localhost
      when: script_output.changed  # Only send email if the script has changed the system state

    # - name: Send email using python script
    #   local_action:
    #     module: command
    #     cmd: |
    #       {{ acm_python3_path }} -c "
    #       import yagmail
    #       body = 'See the attached log for the system check results'
    #       filename = '/tmp/system-check-{{ ansible_hostname }}.log'
    #       yag = yagmail.SMTP('{{ email_sender }}', '{{ email_password }}')
    #       yag.send(
    #           to='{{ email_receiver }}',
    #           subject='System Check Result - {{ ansible_hostname }}',
    #           contents=body,
    #           attachments=filename
    #       )"
    #   when: script_output.changed  # Only send email if the script has changed the system state
